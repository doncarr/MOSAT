
#include <stdio.h>
#include <stdlib.h>

struct ref_param_t
{
};

struct ref_def_t
{
};

struct rt_point_def_t
{
  const char *base_obj;
  const char *objname;
  const char *enum_type;
  const char **script_functions;
  int n_script_functions;
  const char **extra_privates;
  int n_extra_privates;
};

/**********************************************************************/

void gen_point_template(rt_point_def_t *rtpd, FILE *fpout)
{
  fprintf(fpout, "/***************************\n");
  fprintf(fpout, "This is an auto-generated file, do NOT edit!!\n");
  fprintf(fpout, "   generated by %s\n", __FILE__);
  fprintf(fpout, "***************************/\n");
  fprintf(fpout, "#include <stdio.h>\n");
  fprintf(fpout, "#include <stdlib.h>\n");
  fprintf(fpout, "#include \"rtcommon.h\"\n");
  fprintf(fpout, "#include \"arg.h\"\n");
  fprintf(fpout, "#include \"db_point.h\"\n");
  fprintf(fpout, "\n");

  fprintf(fpout, "class %s_t : public %s\n", rtpd->objname, rtpd->base_obj);
  fprintf(fpout, "{\n");
  fprintf(fpout, "private:\n");
  fprintf(fpout, "  // Put private  member data fields here\n");
  fprintf(fpout, "  init_extra(char *err, int esz);\n");

  for (int i=0; i < rtpd->n_extra_privates; i++)
  {
    fprintf(fpout, "  %s;\n", rtpd->extra_privates[i]);
  }

  fprintf(fpout, "public:\n");
  for (int i=0; i < rtpd->n_script_functions; i++)
  {
    fprintf(fpout, "/*#SCRIPT_FUNCTION#*/\n");
    fprintf(fpout, "  void %s;\n", rtpd->script_functions[i]);
  }
  fprintf(fpout, "  point_type_t point_type(void) {return %s;};\n", 
               rtpd->enum_type);
  fprintf(fpout, "  ~%s_t(void);\n", rtpd->objname);
  fprintf(fpout, "  static %s_t **read(int *cnt, const char * home_dir);\n",
               rtpd->objname);
  fprintf(fpout, "  static %s_t *create_one(int argc, char *argv[], char *err, int esz);\n", rtpd->objname);
  fprintf(fpout, "  void update(void);\n");
  fprintf(fpout, "};\n");
  // End of class definition.


  // Start of member function generation.
  fprintf(fpout, "\n\n/***************************/\n\n");
  fprintf(fpout, "void %s::update(void)\n", rtpd->objname);
  fprintf(fpout, "{\n");
  fprintf(fpout, "  // Put the code for your update function here\n");
  fprintf(fpout, "}\n");

  fprintf(fpout, "\n\n/***************************/\n\n");
  fprintf(fpout, "%s_t **%s_t::read(int *cnt, const char *home_dir)\n", rtpd->objname, rtpd->objname);
  fprintf(fpout, "{\n");
  fprintf(fpout, "  objp = this->assign_one(argc, argv, err, esz);\n");
  fprintf(fpout, "  objp->init_extra(err, esz);\n");
  fprintf(fpout, "}\n");
  fprintf(fpout, "\n\n/***************************/\n\n");
  fprintf(fpout, "void **%s_t::init_extra(int *cnt, const char *home_dir)\n", rtpd->objname);
  fprintf(fpout, "{\n");
  fprintf(fpout, "  // Put extra inicialization of your object here\n");
  fprintf(fpout, "}\n");
  for (int i=0; i < rtpd->n_script_functions; i++)
  {
    fprintf(fpout, "\n\n/***************************/\n\n");
    fprintf(fpout, "void %s_t::%s\n", rtpd->objname, rtpd->script_functions[i]);
    fprintf(fpout, "{\n");
    fprintf(fpout, "  // Put the code for your script function here\n");
    fprintf(fpout, "}\n");
  }

  fprintf(fpout, "\n\n/***************************/\n\n");
}

/**********************************************************************/

int main(int argc, char *argv[])
{
  FILE *fp = fopen("junk_template.cpp", "w");

  const char *scf[] = {"set_this(double x)", "set_that(double x, bool, y)"}; 
  const char *exp[] = {"double dbv", "char name[50]", "do_point_t do_point"}; 

  rt_point_def_t rtpd = {"discrete_point_t", "newtype", "NEWTYPE_POINT", scf, 2, exp, 3};
  
  gen_point_template(&rtpd, fp); 
}

/**********************************************************************/
