/***************************
This is an auto-generated file, do NOT edit!!
   generated by ./gen_sqlite
***************************/
#include <stdio.h>
#include <stdlib.h>
#include "rtcommon.h"
#include "arg.h"
#include "db_point.h"
#include "logfile.h"
int read_fns_start_hook(const char *path)
{
  logfile->vprint("Delimited text file start hook: %s\n", path);
  return 0;
}
void read_fns_end_hook(void)
{
  logfile->vprint("Delimited text file end hook\n");
}
ao_point_t **ao_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 ao_point_t **dbps =
 (ao_point_t **) malloc(max_points * sizeof(ao_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/ao.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(ao_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (ao_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = ao_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
scan_point_t **scan_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 scan_point_t **dbps =
 (scan_point_t **) malloc(max_points * sizeof(scan_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/scan.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(scan_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (scan_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = scan_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
pump_point_t **pump_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 pump_point_t **dbps =
 (pump_point_t **) malloc(max_points * sizeof(pump_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/pump.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(pump_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (pump_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = pump_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
discrete_value_point_t **discrete_value_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 discrete_value_point_t **dbps =
 (discrete_value_point_t **) malloc(max_points * sizeof(discrete_value_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/discrete_value.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(discrete_value_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (discrete_value_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = discrete_value_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
pid_point_t **pid_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 pid_point_t **dbps =
 (pid_point_t **) malloc(max_points * sizeof(pid_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/pid.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(pid_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (pid_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = pid_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
dcalc_point_t **dcalc_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 dcalc_point_t **dbps =
 (dcalc_point_t **) malloc(max_points * sizeof(dcalc_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/discrete_calc.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(dcalc_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (dcalc_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = dcalc_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
timer_point_t **timer_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 timer_point_t **dbps =
 (timer_point_t **) malloc(max_points * sizeof(timer_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/timer.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(timer_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (timer_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = timer_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
do_point_t **do_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 do_point_t **dbps =
 (do_point_t **) malloc(max_points * sizeof(do_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/do.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(do_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (do_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = do_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
web_point_t **web_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 web_point_t **dbps =
 (web_point_t **) malloc(max_points * sizeof(web_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/web.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(web_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (web_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = web_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
data_point_t **data_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 data_point_t **dbps =
 (data_point_t **) malloc(max_points * sizeof(data_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/data.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(data_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (data_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = data_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
discrete_logger_t **discrete_logger_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 discrete_logger_t **dbps =
 (discrete_logger_t **) malloc(max_points * sizeof(discrete_logger_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/discrete_logger.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(discrete_logger_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (discrete_logger_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = discrete_logger_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
remote_pid_t **remote_pid_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 remote_pid_t **dbps =
 (remote_pid_t **) malloc(max_points * sizeof(remote_pid_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/remote_pid.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(remote_pid_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (remote_pid_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = remote_pid_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
valve_point_t **valve_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 valve_point_t **dbps =
 (valve_point_t **) malloc(max_points * sizeof(valve_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/valve.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(valve_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (valve_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = valve_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
ac_point_t **ac_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 ac_point_t **dbps =
 (ac_point_t **) malloc(max_points * sizeof(ac_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/ac.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(ac_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (ac_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = ac_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
ai_point_t **ai_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 ai_point_t **dbps =
 (ai_point_t **) malloc(max_points * sizeof(ai_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/ai.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(ai_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (ai_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = ai_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
di_point_t **di_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 di_point_t **dbps =
 (di_point_t **) malloc(max_points * sizeof(di_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/di.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(di_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (di_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = di_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
analog_value_point_t **analog_value_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 analog_value_point_t **dbps =
 (analog_value_point_t **) malloc(max_points * sizeof(analog_value_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/analog_value.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(analog_value_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (analog_value_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = analog_value_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
pci_point_t **pci_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 pci_point_t **dbps =
 (pci_point_t **) malloc(max_points * sizeof(pci_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/pci.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   printf("%s\n", tmp);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(pci_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (pci_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = pci_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
calc_point_t **calc_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 calc_point_t **dbps =
 (calc_point_t **) malloc(max_points * sizeof(calc_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/calc.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(calc_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (calc_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = calc_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
file_logger_t **file_logger_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 file_logger_t **dbps =
 (file_logger_t **) malloc(max_points * sizeof(file_logger_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/file_logger.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(file_logger_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (file_logger_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = file_logger_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
level_point_t **level_point_t::read(int *cnt, const char *home_dir)
{
 int max_points = 100;
 level_point_t **dbps =
 (level_point_t **) malloc(max_points * sizeof(level_point_t*));
 MALLOC_CHECK(dbps);
 *cnt = 0;
 int count = 0;
 char path[500];
 snprintf(path, sizeof(path), "%s//dbfiles/level.dat", home_dir);
 FILE *fp = fopen(path, "r");
 if (fp == NULL)
 {
   logfile->perror(path);
   logfile->vprint("Can't open %s\n", path);
   return NULL;
 }
 char line[500];
 for (int i=0; NULL != fgets(line, sizeof(line), fp); i++)
 {
   char tmp[500];
   int argc;
   char *argv[50];
   ltrim(line);
   rtrim(line);
   snprintf(tmp, sizeof(tmp), "%s", line);
   argc = get_delim_args(tmp, argv, '|', 50);
   if (argc == 0)
   {
     continue;
   }
   else if (argv[0][0] == '#')
   {
     continue;
   }
   if (count >= max_points)
   {
     max_points += 50;
     int new_size = max_points * sizeof(level_point_t*);
     logfile->vprint("Reallocating: new size = %d\n", new_size);
     dbps = (level_point_t **) realloc(dbps, new_size);
     MALLOC_CHECK(dbps);
   }
   logfile->vprint("%s\n", line);
   char errbuf[100];
   dbps[count] = level_point_t::create_one(argc, argv, errbuf, sizeof(errbuf));
   if (dbps[count] == NULL)
   {
     logfile->vprint("%s:%d\n", path, i+1);
     logfile->vprint("%s\n", errbuf);
     continue;
   }
   count++;
 }
 if (count == 0)
 {
   free(dbps);
   return NULL;
 }
 *cnt = count;
 return dbps;
}
