<!--
Auto generated file DO NOT EDIT
Generated by: gen_display.cpp, at 2013-03-08 13:43:28 -0600
-->
<!--  START insert svg header -->
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%" viewBox="0 0 300 150" onload="load()">

  <title>Feed Tanks</title>
  <metadata>author: Don Carr</metadata>
<!--  END insert svg header -->
<!--  START insert background color -->
<g id="main_group">
<rect fill="thistle" x="0%" y="0%" width="100%" height="100%" stroke="none" stroke-width="0"/>
<!--  END insert background color -->
<!-- START insert svg library: filter1.svg-->
<defs>
<filter id="filter1" filterUnits="userSpaceOnUse" width="200%" height="200%">
  <feColorMatrix type="matrix" in="SourceAlpha" result="lightened"
       values="0   0   0   0   0
               0   0   0   0   0
               0   0   0   0   0
               0   0   0 0.6   0"/>
  <feGaussianBlur in="lightened" stdDeviation="2.5" result="blurred"/>
  <feMorphology operator="erode" in="blurred" radius="2" result="eroded"/>
  <feOffset in="eroded" dx="2" dy="3" result="moved"/>
  <feMerge>
    <feMergeNode in="moved"/>
    <feMergeNode in="SourceGraphic"/>
  </feMerge>
</filter>
</defs>
<!-- END insert svg library: filter1.svg -->
<!--  START insert for rgauge (001) -->
<circle cx="50" cy="50" r="40" fill="antiquewhite" stroke="black" stroke-width="1.25984" filter="url(#filter1)"/>
<text id="rgauge_pv_001" text-anchor="middle" x="46.8504" y="59.4488" font-size="31.4961" fill="blue" filter="url(#filter1)">00</text>
<line x1="21.0236" y1="35.5118" x2="73.3071" y2="35.5118" stroke ="darkgray" stroke-width="0.377953"/>
<line x1="21.0236" y1="63.2283" x2="73.3071" y2="63.2283" stroke ="darkgray" stroke-width="0.377953"/>
<text id="rgauge_eu_001" text-anchor="middle" x="50" y="70.7874" font-size="9.44882" fill="blue" filter="url(#filter1)">amps</text>
<text id="rgauge_hi_001" text-anchor="start" x="35.5118" y="81.4961" font-size="5.03937" fill="blue" filter="url(#filter1)">0</text>
<text id="rgauge_lo_001" text-anchor="end" x="65.1181" y="81.4961" font-size="5.03937" fill="blue" filter="url(#filter1)">30</text>
<line x1="35.5118" y1="82.7559" x2="65.748" y2="82.7559" stroke ="darkgray" stroke-width="0.377953"/>
<!--  END insert for rgauge (001) -->
<!--  START insert for attrs (001) -->
<!--  END insert for attrs (001) -->
</g>
<script type="text/ecmascript"><![CDATA[
const MAX_OUTPUT_RATE = 250;
const UPDATE_DELAY = 1000;
const svgNS = "http://www.w3.org/2000/svg";
var reactmainobj=document.getElementById("main_group");
// -- START insert js library: rgauge.js


function rg_delete_trailing_zeros(str)
{
  // Deletes any trailing zeros if there is a decimal point.
  // There MUST be better more elegant way to do this, PLEASE HELP
  console.log("delete trailing zeros: " + str);
  var found = false;
  var the_ch;
  for (var i=0; i < str.length; i++)
  {
    the_ch = str.charAt(i);
    console.log("the char at " + i + ": " + the_ch);
    if ('.' == the_ch) found = true; 
  }
  if (!found) return str;

  console.log(str);
  while ('0' == str.charAt(str.length-1)) 
  {
    str = str.substring(0, str.length-1);
    console.log(str);
  }
  if ('.' == str.charAt(str.length-1)) str = str.substring(0, str.length-1);
  return str;
} 

function rgauge_t(pv_name, eu_name, lo_name, hi_name, x, y, width)
{
  console.log("pv_name " + pv_name);
  console.log("eu_name " + eu_name);

  this.min=0.0;
  this.max=200.0;
  this.pv_obj=document.getElementById(pv_name);
  this.eu_obj=document.getElementById(eu_name);
  this.lo_obj=document.getElementById(lo_name);
  this.hi_obj=document.getElementById(hi_name);
  this.eu_label="not set";
  this.x=x;
  this.y=y;
  this.width=width;
  this.cx=this.x + (this.width / 2.0)
  this.cy=this.y + (this.width / 2.0)
  this.r = width / 2;
  this.rcolor_ok = "green";
  this.rcolor_caution = "gold";
  this.rcolor_alarm = "rgb(204,0,0)";
  this.n_blocks = 80;
  this.alarm_n=999;
  this.caution_n=999;
  this.last_n=0;

  console.log("pv_obj: " + this.pv_obj);
  console.log("eu_obj: " + this.eu_obj);
  console.log("lo_obj: " + this.lo_obj);
  console.log("hi_obj: " + this.hi_obj);
}

function rg_gauge_init_f(val)
{
  this.min=val.scale_lo;
  this.max=val.scale_hi;
  this.eu_label=val.eu;
  this.decimal_places = val.decimal_places;
  this.eu_obj.textContent = this.eu_label;
  this.lo_obj.textContent = this.min;
  this.hi_obj.textContent = this.max;
  if (val.hi_caution_enable)
  {
    this.caution_n = Math.round((this.n_blocks-1) * (val.hi_caution / this.max));
  }
  if (val.hi_alarm_enable)
  {
    this.alarm_n =  Math.round((this.n_blocks-1) * (val.hi_alarm / this.max));
  }
  this.create_blocks(30, 300/this.n_blocks, this.n_blocks)
  console.log("max: " + this.max);
  console.log("eu_label: " + this.eu_label);
}
rgauge_t.prototype.init=rg_gauge_init_f;

function rg_set_block_f(n, on)
{
  var len = this.shapes.length;
  if (n < 0) n=0; 
  if (n >= len) n=len-1;
  if(!on) 
  {
    this.shapes[n].setAttribute("fill", "antiquewhite");
    return;
  } 
  if (n > this.alarm_n) 
  {
    this.shapes[n].setAttribute("fill", this.rcolor_alarm);
  }
  if (n > this.caution_n) 
  {
    this.shapes[n].setAttribute("fill", this.rcolor_caution);
  }
  else
  {
    this.shapes[n].setAttribute("fill", this.rcolor_ok);
  }

}
rgauge_t.prototype.set_block=rg_set_block_f;

function rg_gauge_update_f(pv)
{
  var n;
  //console.log("pv: " + pv + ", needle_obj = " + this.needle_obj);
  this.pv_obj.textContent = pv.toFixed(this.decimal_places);
  if (pv < 0.0) {pv = 0.0;}
  if (pv > this.max) {pv = max;}
  //console.log("max: " + this.max);
  //console.log("length: " + this.length);
  n = Math.round((this.n_blocks-1) * (pv / this.max)); // gives 0-49
  n=n+1;
  if (n > this.last_n)
  {
    for (var i=this.last_n; i < (n); i++)
    {
      this.set_block(i, true);
    }
  }
  else
  {
    // Go in reverse in case it is slow enough to see.
    for (var i=this.last_n-1; i >= n; i--)
    //for (var i=n; i < this.last_n; i++)
    {
      this.set_block(i, false);
    }
  }
  this.last_n = n;
}
rgauge_t.prototype.update=rg_gauge_update_f;

function rg_create_blocks_f(start_angle, degrees, n)
{
  this.w1 = this.r * (3/50);
  this.w2 = this.r * (15/50);

  var rads;
  var shape;
  var x1, x2, x3, x4, lx1, lx2;
  var y1, y2, y3, y4, ly1, ly2;
  var a1 = start_angle - degrees * 0.42; 
  var a2 = start_angle + degrees * 0.42; 
  var rline = this.r*(51/50); 
  var wline = this.r/50;

  console.log("Creating " + n + " blocks, each " + degrees + " degrees, starting at " + start_angle);
  this.shapes = new Array();
  for (var i=0; i < n; i++)
  {
    var ws = this.w1 + ((i/n) * (this.w2-this.w1))
    var we = this.w1 + (((i+1)/n) * (this.w2-this.w1))

    //------------------------------------------
    rads = (a1 - 90.0) * ((2.0 * Math.PI) / 360.0);

    x1 = this.cx - (this.r * Math.cos(rads));
    y1 = this.cy - (this.r * Math.sin(rads));

    x2 = this.cx - ((this.r-ws) * Math.cos(rads));
    y2 = this.cy - ((this.r-ws) * Math.sin(rads));

    lx1 = this.cx - (rline * Math.cos(rads));
    ly1 = this.cy - (rline * Math.sin(rads));
    //------------------------------------------

    //------------------------------------------
    rads = (a2 - 90.0) * ((2.0 * Math.PI) / 360.0);

    x3 = this.cx - ((this.r-we) * Math.cos(rads));
    y3 = this.cy - ((this.r-we) * Math.sin(rads));

    x4 = this.cx - (this.r * Math.cos(rads));
    y4 = this.cy - (this.r * Math.sin(rads));

    lx2 = this.cx - (rline * Math.cos(rads));
    ly2 = this.cy - (rline * Math.sin(rads));
    //------------------------------------------

    shape = document.createElementNS(svgNS, "line");
    //shape.appendChild(reactmainobj);
    shape.setAttribute("x1", lx1);
    shape.setAttribute("y1", ly1);
    shape.setAttribute("x2", lx2);
    shape.setAttribute("y2", ly2);
    shape.setAttribute("stroke-width", wline);
    if (i > this.alarm_n)
    {
      shape.setAttribute("stroke", this.rcolor_alarm);
    }
    else if (i > this.caution_n)
    {
      shape.setAttribute("stroke", this.rcolor_caution);
    }
    else
    {
      shape.setAttribute("stroke", this.rcolor_ok);
    }
    //document.documentElement.appendChild(shape);
    reactmainobj.appendChild(shape);

    shape = document.createElementNS(svgNS, "polygon");
    reactmainobj.appendChild(shape);
    //shape.appendChild(reactmainobj);
    shape.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
    shape.setAttribute("stroke-width", this.r / 200);
    shape.setAttribute("stroke", "lightgray");
    shape.setAttribute("fill", "antiquewhite");
    
    //document.documentElement.appendChild(shape);
    reactmainobj.appendChild(shape);
    this.shapes[i]=shape;
    a1 += degrees;
    a2 += degrees;
  }
}
rgauge_t.prototype.create_blocks=rg_create_blocks_f;


// -- END insert js library: rgauge.js
// -- START insert js library: attributes.js

function attributes_t(x, y, h)
{
  console.log("attributes_t: x: " + x + ", y: " + y + ", h:" + h);
  this.x = x;
  this.y = y;
  this.h = h;
}

function attributes_init_f(val)
{
  for(var prop_name in val) 
  {
    if(typeof(val[prop_name]) != "undefined") 
    {
      shape = document.createElementNS(svgNS, "text");
      shape.setAttribute("x", this.x);
      shape.setAttribute("y", this.y);
      shape.setAttribute("font-size", this.h);
      //shape.setAttribute("baseline-shift", "-33%");
      shape.setAttribute("text-anchor", "start");
      shape.textContent=prop_name + ": " + val[prop_name];
      //document.documentElement.appendChild(shape);
      reactmainobj.appendChild(shape);
      this.y += (this.h * 1.2); 
    }
  }
}
attributes_t.prototype.init=attributes_init_f;

function attributes_update_f(pv)
{
}
attributes_t.prototype.update=attributes_update_f;

// -- END insert js library: attributes.js
// -- START insert js library: sim_pump.js
var sim;

    function pump_1_timeout()
    {
      sim.toggle_pump1();
    };

    function pump_2_timeout()
    {
      sim.toggle_pump2();
    };

    function pump_3_timeout()
    {
      sim.toggle_pump3();
    };

function sim_object_t()
{
  this.lo_level=89;
  this.hi_level=270;
  this.hi_hi_level=325;
  this.rate=0;
  this.up=true;
  this.last_time = 0;

  this.pv =
  {
    "LEVEL":0.50,
    "LEVEL1":19253.0,
    "LEVEL2":0.0,
    "PVALVE":0.10,
    "PUMP1_AMP":0,
    "PUMP2_AMP":0,
    "PUMP3_AMP":0,
    "PUMP1_ON":true,
    "PUMP2_ON":true,
    "PUMP3_ON":true,
    "HI_HI_LEVEL":false,
    "HI_LEVEL":false,
    "LO_LEVEL":true,
    "KW":0,
    "KWH":134528.291,
    "KWHM":104.823,
    "SPRAY_PUMP_ON":false,
    "PVALVE_ON":false,
    "XFER_ON":false,
    "PRESSURE":0.0,
    "SLIDER":10.0
  }

  this.cfg =
  {
    "LEVEL":{"tag":"LEVEL","description":"NIVEL","eu":"cm","decimal_places":0,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":300.0,"hi_alarm":380.0,"lo_alarm_enable":true,"lo_caution_enable":true,"hi_caution_enable":true,"hi_alarm_enable":true, "scale_lo":0,"scale_hi":450},
    "LEVEL1":{"tag":"LEVEL1","description":"Level 1","eu":"liters","decimal_places":0,"zero_cutoff":-125,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":300.0,"hi_alarm":380.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false, "scale_lo":0,"scale_hi":20000},
    "LEVEL2":{"tag":"LEVEL2","description":"Level 1","eu":"liters","decimal_places":0,"zero_cutoff":-125,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":300.0,"hi_alarm":380.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false, "scale_lo":0,"scale_hi":20000},
    "PRESSURE":{"tag":"PRESSURE","description":"Pressure","eu":"psi","decimal_places":0,"zero_cutoff":-5000,"lo_alarm":21,"lo_caution":23,"hi_caution":28,"hi_alarm":30,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false,"scale_lo":0, "scale_hi":175},
    "PVALVE":{"tag":"PVALVE","description":"Proportion Valve","eu":"","decimal_places":2,"zero_cutoff":-5000,"lo_alarm":21,"lo_caution":23,"hi_caution":28,"hi_alarm":30,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false,"scale_lo":0, "scale_hi":1},
    "KW":{"tag":"KW","description":"KW","eu":"kW","decimal_places":1,"zero_cutoff":-125,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":80.0,"hi_alarm":90.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":true,"hi_alarm_enable":false, "scale_lo":0,"scale_hi":100},
    "KWH":{"tag":"KWH","description":"KWH","eu":"kWh","decimal_places":5,"zero_cutoff":-125,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":80.0,"hi_alarm":90.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false, "scale_lo":0,"scale_hi":10000000},
    "KWHM":{"tag":"KWHM","description":"KWHM","eu":"kWh","decimal_places":5,"zero_cutoff":-125,"lo_alarm":15.0,"lo_caution":44.0,"hi_caution":80.0,"hi_alarm":90.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false, "scale_lo":0,"scale_hi":10000000},
    "PUMP1_AMP":{"tag":"PUMP1_AMP","description":"BOMBA 1","eu":"amps","decimal_places":1,"zero_cutoff":-12.5,"lo_alarm":0,"lo_caution":0,"hi_caution":30,"hi_alarm":35,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":true,"hi_alarm_enable":true,"scale_lo":0,"scale_hi":40},
    "PUMP2_AMP":{"tag":"PUMP2_AMP","description":"BOMBA 2","eu":"amps","decimal_places":1,"zero_cutoff":-12.5,"lo_alarm":0,"lo_caution":0,"hi_caution":30,"hi_alarm":35,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":true,"hi_alarm_enable":true,"scale_lo":0,"scale_hi":40},
    "SLIDER":{"tag":"SLIDER","description":"Slider Value","eu":"%","decimal_places":1,"zero_cutoff":-100.0,"lo_alarm":0.0,"lo_caution":0.0,"hi_caution":0.0,"hi_alarm":0.0,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":false,"hi_alarm_enable":false,"scale_lo":0,"scale_hi":100},
    "PUMP3_AMP":{"tag":"PUMP3_AMP","description":"BOMBA 3","eu":"amps","decimal_places":1,"zero_cutoff":-12.5,"lo_alarm":0,"lo_caution":0,"hi_caution":30,"hi_alarm":35,"lo_alarm_enable":false,"lo_caution_enable":false,"hi_caution_enable":true,"hi_alarm_enable":true,"scale_lo":0,"scale_hi":40},
    "PUMP1_ON": {"tag":"PUMP1_ON","description":"Bomba 1 ON","lo_desc":"Off","hi_desc":"ON", "invert_pv":false},
    "PUMP2_ON":{"tag":"PUMP2_ON","description":"Bomba 1 ON","lo_desc":"Off","hi_desc":"ON", "invert_pv":false},
    "PUMP3_ON":{"tag":"PUMP3_ON","description":"Bomba 1 ON","lo_desc":"Off","hi_desc":"ON", "invert_pv":false},
    "COV-810-A":{"tag":"COV-810-A","description":"COV-810-A","lo_desc":"to T811","hi_desc":"to T810", "invert_pv":false},
    "SPRAY_PUMP_ON":{"tag":"SPRAY_PUMP_ON","description":"Spray Pump ON","lo_desc":"Off","hi_desc":"On","invert_pv":false},
    "PVALVE_ON":{"tag":"PVALVE_ON","description":"Proportional Valve ON","lo_desc":"25","hi_desc":"75","invert_pv":false},
    "XFER_ON":{"tag":"XFER_ON","description":"Transfer ON","lo_desc":"Stop","hi_desc":"Start","invert_pv":false},
    "HI_HI_LEVEL":{"tag":"HI_HI_LEVEL","description":"Nivel Muy Alto","lo_desc":"BELOW","hi_desc":"ABOVE","invert_pv":false},
    "HI_LEVEL":{"tag":"HI_LEVEL","description":"Nivel Alto","lo_desc":"BELOW","hi_desc":"ABOVE","invert_pv":false},
    "LO_LEVEL":{"tag":"LO_LEVEL","description":"Nivel Bajo","lo_desc":"BELOW","hi_desc":"ABOVE","invert_pv":false},
  }
} 

function sim_object_init_f(val)
{

}
sim_object_t.prototype.init=sim_object_init_f;

function toggle_pump2_f(val)
{
  this.pv.PUMP2_ON = !this.pv.PUMP2_ON
  console.log("Toggle pump 2 to:", this.pv.PUMP2_ON);
}
sim_object_t.prototype.toggle_pump2=toggle_pump2_f;

function toggle_pump3_f(val)
{
  this.pv.PUMP3_ON = !this.pv.PUMP3_ON
  console.log("Toggle pump 3 to:", this.pv.PUMP3_ON);
}
sim_object_t.prototype.toggle_pump3=toggle_pump3_f;

function toggle_pump1_f(val)
{
  this.pv.PUMP1_ON = !this.pv.PUMP1_ON
  console.log("Toggle pump 1 to:", this.pv.PUMP1_ON);
}

sim_object_t.prototype.toggle_pump1=toggle_pump1_f;

function sim_object_get_cfg_f(tag)
{
  console.log("getting config for: " + tag);
  var the_val = this.cfg[tag.toUpperCase()];
  console.log("cfg value: " + the_val);
  return the_val;
}
sim_object_t.prototype.get_cfg=sim_object_get_cfg_f;

function sim_object_get_pv_f(tag)
{
  //console.log("getting PV for: " + tag);
  var the_val = this.pv[tag.toUpperCase()];
  //console.log("PV: " + the_val);
  return the_val;
}
sim_object_t.prototype.get_pv=sim_object_get_pv_f;

function sim_object_set_pv_f(tag, new_val)
{
  console.log("setting PV for: " + tag);
  this.pv[tag.toUpperCase()]=new_val;
  console.log("new PV: " + new_val);
}
sim_object_t.prototype.set_pv=sim_object_set_pv_f;

function next_value(tau, steady_state_value, last_value, delta_t)
{
  if (Math.abs(steady_state_value - last_value) < 0.01)
  {
    return steady_state_value;
  }
  var fraction = 1.0 - Math.exp(-delta_t/tau);
  return last_value + ((steady_state_value - last_value) * fraction);
}

    function sim_object_update_f(now)
    {
      if (this.up)
      {
        if (this.pv.LEVEL > (this.lo_level+2)) this.pv.LO_LEVEL=true;
        if (this.pv.LEVEL > (this.hi_level+1))
        { 
          this.up=false;
          this.pv.HI_LEVEL=true;
          setTimeout("pump_1_timeout()", 1000);
          setTimeout("pump_2_timeout()", 4000);
          setTimeout("pump_3_timeout()", 7000);
        }
        if (this.pv.LEVEL > (this.hi_hi_level+2)) this.pv.HI_HI_LEVEL=true;
      }
      else
      {
        if (this.pv.LEVEL < (this.lo_level-1)) 
        {
          this.up=true;
          this.pv.LO_LEVEL=false;
          setTimeout("pump_3_timeout()", 1000);
          setTimeout("pump_2_timeout()", 4000);
          setTimeout("pump_1_timeout()", 7000);
        }
        if (this.pv.LEVEL < (this.hi_level-3)) this.pv.HI_LEVEL=false;
        if (this.pv.LEVEL < (this.hi_hi_level-3)) this.pv.HI_HI_LEVEL=false;
      }
      this.rate=10.0;
      if (!this.pv.PUMP1_ON) 
      {
        this.rate -= 6.0;
        this.pv.PUMP1_AMP= (27 +((Math.random()-0.5)*0.6));
      }
      else
      {
        this.pv.PUMP1_AMP= (0 +((Math.random()-0.5)*0.6));
      }

      if (!this.pv.PUMP2_ON) 
      {
        this.rate -= 6.0;
        this.pv.PUMP2_AMP= (27 +((Math.random()-0.5)*0.6));
      }
      else
      {
        this.pv.PUMP2_AMP= (0 +((Math.random()-0.5)*0.6));
      }

      if (!this.pv.PUMP3_ON)
      {
        this.rate -= 6.0;
        this.pv.PUMP3_AMP = (27 +((Math.random()-0.5)*0.6));
      }
      else
      {
        this.pv.PUMP3_AMP = (0 +((Math.random()-0.5)*0.6));
      }
      this.rate = this.rate * 1.5;
      this.pv.LEVEL +=this.rate*0.1;
      this.pv.LEVEL = ((this.pv.LEVEL+((Math.random()-0.5)*0.8)));
      this.pv.KW = this.pv.LEVEL/3.2;
      this.pv.KWH += this.pv.KW / (3600 * 10); 
      this.pv.KWHM += this.pv.KW / (3600 * 10); 
      if (this.pv.SPRAY_PUMP_ON) 
      {
        this.pv.PRESSURE = next_value(1, 162.5 * this.pv.PVALVE, this.pv.PRESSURE, now - this.last_time)
      }
      else
      {
        this.pv.PRESSURE = next_value(0.5, 0, this.pv.PRESSURE, now - this.last_time)
      }
      //console.log("PRESSURE: " + this.pv.PRESSURE)
      /**
      if (this.pv.PVALVE_ON)
      {
        this.pv.PVALVE = 0.75; 
      }
      else
      {
        this.pv.PVALVE = 0.25; 
      }
      **/
      if (this.pv.XFER_ON) 
      {
        var liters = (now - this.last_time) * 22;
        if (this.pv.LEVEL1 < 100)
        {
          this.pv.XFER_ON = false; // Stop the transfer
        }
        else
        {
          this.pv.LEVEL1 -= liters;
          this.pv.LEVEL2 += liters;
        }
      }
      this.last_time = now; 
    }
    sim_object_t.prototype.update=sim_object_update_f;

sim = new sim_object_t;

// -- END insert js library: sim_pump.js
// --  START insert for rgauge (001)
var rgauge_obj_001 = new rgauge_t("rgauge_pv_001", "rgauge_eu_001", "rgauge_hi_001", "rgauge_lo_001", 12.2047, 12.2047, 75.5906);
// --  END insert for rgauge (001)
// --  START insert for attrs (001)
var attributes_obj_001 = new attributes_t(100, 10, 7, "firebrick");
// --  END insert for attrs (001)
// -- START insert simulation code --
var arg_objs = new Array(
    [attributes_obj_001,rgauge_obj_001]);
var arg_tags;
var n_arg_cfg = 0;
const update_objs = new Array();
const update_tags = new Array();
function update_objects()
{
  for (var i=0; i < update_objs.length; i++)
  {
    update_objs[i].update(sim.get_pv(update_tags[i]));
  }
  for (var i=0; (i < arg_objs.length); i++)
  {
    var aobjs = arg_objs[i]
    var one_val = sim.get_pv(arg_tags[i])
    for (var j=0; j < aobjs.length; j++)
    {
      aobjs[j].update(one_val);
    }
  }
}

function send_output(tag, new_value)
{
  console.log("send_output, tag: " + tag + ": " + new_value);
  sim.set_pv(tag, new_value);
}

function get_config(the_tag)
{
  return sim.get_cfg(the_tag);
}

function config_objects()
{
  var i;
  for (i=0; i < update_objs.length; i++)
  {
    console.log("config tag: " + update_tags[i]);
    update_objs[i].init(sim.get_cfg(update_tags[i]));
  }
  for (i=0; i < arg_objs.length; i++)
  {
    var aobjs = arg_objs[i]
    for (var j=0; j < aobjs.length; j++)
    {
      console.log("arg tag: " + arg_tags[i]);
      aobjs[j].init(sim.get_cfg(arg_tags[i]));
    }
  }
}

var sim_now=0.0;
function intervalHandler()
{
  sim_now+=0.1
  sim.update(sim_now);
  update_objects();
}

function load()
{
  var argtmp = location.search.substr(1);
  arg_tags = argtmp.split('+');
  for (var i=0; i < arg_tags.length; i++)
  {
    console.log("arg_tags[" + i +  "]: " + arg_tags[i])
  }
  for (var i=0; (i < arg_objs.length); i++)
  {
    var aobjs = arg_objs[i]
    for (var j=0; j < aobjs.length; j++)
    {
      console.log("arg objs[" + i +"][" + j + "]: " + aobjs[j]);
    }
  }
  config_objects();
  update_objects();
  var interval = setInterval("intervalHandler()", 100);
};

// -- END insert simulation code --
]]></script>
</svg>
