
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "react_svg.h"

const double minor_length = 3;
const double major_length = 6;
//       90.0, 140.0, 380.0, 450.0, 

double alarm_lo;// = (0.08 * (scale_max - scale_min)) + scale_min;
double caution_lo;// = (0.28 * (scale_max - scale_min)) + scale_min;
double caution_hi;// =  (0.76 * (scale_max - scale_min)) + scale_min;
double alarm_hi;// =  (0.90 * (scale_max - scale_min)) + scale_min;


/**
const double bar_x = 20; 
const double bar_y = 10; 
const double bar_height = 100;
const double bar_width = 20; 
const double a_bar_width = 10; 
***/

//, float fraction_top, float fraction_bottom, float ftop2, float fbot2);
/**********************************************************/

void gen_svg_header(FILE *fp, const char *title, int vb_x1, int vb_y1, int vb_x2, int vb_y2)
{
  fprintf(fp, "<!--\n"); 
  fprintf(fp, "Auto generated file DO NOT EDIT\n");
  fprintf(fp, "Generated by: %s\n", __FILE__);
  fprintf(fp, "-->\n");

  fprintf(fp, "<svg xmlns=\"http://www.w3.org/2000/svg\"\n");
  fprintf(fp, "     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n");
  fprintf(fp, "     width=\"100%%\" height=\"100%%\" viewBox=\"%d %d %d %d\" onload=\"load()\">\n", 
          vb_x1, vb_y1, vb_x2, vb_y2);
  fprintf(fp, "\n");
  fprintf(fp, "  <title>%s</title>\n", title);
  fprintf(fp, "  <metadata>author: Don Carr</metadata>\n");

  fprintf(fp, "\n");
  fprintf(fp, "<!-- Start of Background -->\n");
  fprintf(fp, "  <defs>\n");
  fprintf(fp, "    <linearGradient id=\"xgrLinearBeige\" x1=\"30%%\" y1=\"0%%\" x2=\"70%%\" y2=\"100%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"tan\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"beige\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"tan\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "  </defs>\n");
  fprintf(fp, "  <rect fill=\"url(#xgrLinearBeige)\" x=\"0%%\" y=\"0%%\" width=\"100%%\" height=\"100%%\" stroke=\"none\" stroke-width=\"0\"/>\n");
  //fprintf(fp, "  <image x=\"140\" y=\"40\" width=\"30\" height=\"30\" xlink:href=\"imasa.png\" />\n");
  //fprintf(fp, "  <image x=\"170\" y=\"40\" width=\"30\" height=\"30\" xlink:href=\"imasa.png\" />\n");
  fprintf(fp, "<!-- End of Background -->\n");
  fprintf(fp, "\n");
}


/**********************************************************/

void gen_svg_end(FILE *fp)
{
  fprintf(fp, "\n");
  fprintf(fp, "</svg>\n");
}

/**********************************************************/

void gen_scale(FILE *fp, double x1, double y1, double y2, double min, double max, double the_text_height, double tic_len)
{

  double max_val, max_major, major_inc, minor_inc;
  int n_major, n_minor, n_dec;

  calc_scales(max, &max_val, &max_major, &major_inc, &minor_inc, &n_major, &n_minor, &n_dec);

  double top_major_y = ((max_major / max_val) * (y2 - y1)) + y1;

  /***
  printf("----------------------------------------\n");
  printf("N major = %d\n", n_major);
  printf("N minor = %d\n", n_minor);
  printf("N dec = %d\n", n_dec);
  printf("major_inc = %0.1lf\n", major_inc);
  printf("minor_inc = %0.1lf\n", minor_inc);
  printf("max_val = %0.1lf\n", max_val);
  printf("max = %0.1lf\n", max);


  double major_val = 0.0;
  for (int i=0; i <= n_major; i++)
  {
    printf("---- %0.*lf\n", n_dec, major_val);
    double minor_val = major_val;
    major_val += major_inc;
    for (int j=1; j < n_minor; j++)
    {
      minor_val += minor_inc;
      if (minor_val <= max_val) printf("- %0.*lf\n", n_dec, minor_val);
    }
  }
***************/


  double minor_len = tic_len / 2.0;
  double x_text_start = x1 + tic_len + 2;

  fprintf(fp, "<!-- Start of Scale -->\n");
  double major_val = 0.0;
  for (int i=0; i <= n_major; i++)
  {
    //double major_y = (((y2 - y1) * i) / n_major) + y1; 
    double major_y = y2 - (((top_major_y - y1) * i) / n_major); 
    //fprintf(fp, "<!-- i = %lf, max = %lf, min = %lf, n_major = %lf -->\n", i, max, min, n_major);
    fprintf(fp, "  <text id=\"major_%d\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">%0.*lf</text>\n", 
         i, x_text_start, 
         major_y + (the_text_height/3), 
         the_text_height, 
         n_dec, major_val);//(((max - min) * (n_major - i)) / n_major) + min);
    fprintf(fp, "  <line x1=\"%lf\"  y1=\"%lf\" x2=\"%lf\" y2=\"%lf\" style=\"stroke:#000000;\"/>\n",
            x1, major_y, x1 + tic_len, major_y);
    double minor_val = major_val;
    major_val += major_inc;
    for (int j=1; j < n_minor; j++)
    {
      //double minor_y = (((y2 - y1) * ((i * n_minor) + j)) / (n_major * n_minor)) + y1; 
      double minor_y = y2 - (((top_major_y - y1) * ((i * n_minor) + j)) / (n_major * n_minor)); 
      //fprintf(fp, "<!-- i = %lf, j = %lf, minor_y = %lf -->\n", i, j, minor_y);
      minor_val += minor_inc;
      if (minor_val <= max_val) 
      {
        fprintf(fp, "  <line x1=\"%lf\"  y1=\"%lf\" x2=\"%lf\" y2=\"%lf\" style=\"stroke:#000000;\"/>\n",
          x1, minor_y, x1 + minor_len, minor_y);
      }
    }
  }
  fprintf(fp, "<!-- End of Scale -->\n");
}

/**********************************************************/

double convert_scale(FILE *fp, double val, double y, double height, double min, double max)
{
  double fraction = (val-min ) / (max - min);
  double span = (height * fraction);
  double scale = y + height - span;
  //fprintf(fp, "<!-- val = %0.1lf, scale = %lf, -->\n", val, scale);
  return scale;
}

/**********************************************************/

void n_gen_alarm_bars(FILE *fp, 
       double min, double max,
       double lo_alarm, double lo_caution, double hi_caution, double hi_alarm, 
       bool lo_alarm_enable, bool lo_caution_enable, bool hi_caution_enable, bool hi_alarm_enable, 
       double x, double y, double height, double width)
{
  double bottom;
  double top;

  fprintf(fp, "\n");
  fprintf(fp, "<!-- Start of Alarm bars-->\n");
  fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"springgreen\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, y, width, height);


  if (hi_caution_enable)
  {
    bottom = convert_scale(fp, hi_caution, y, height, min, max);
    fprintf(fp, "  <rect id=\"caution_hi_rect\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, y, width, bottom - y);
  }
  if (hi_alarm_enable)
  {
    bottom = convert_scale(fp, hi_alarm, y, height, min, max);
    fprintf(fp, "  <rect id=\"alarm_hi_rect\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, y, width, bottom - y);
  }
 
  bottom = y + height;

  if (lo_caution_enable)
  {
    top = convert_scale(fp, lo_caution, y, height, min, max);
    fprintf(fp, "  <rect id=\"caution_lo_rect\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, height - (top - y));
  }
  if (lo_alarm_enable)
  {
    top = convert_scale(fp, lo_alarm, y, height, min, max);
    fprintf(fp, "  <rect id=\"alarm_lo_rect\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, height -(top - y));
    bottom = top;
  }
  fprintf(fp, "<!-- End of Alarm bars-->\n\n");
}

/**********************************************************/
/**********************************************************/

void gen_alarm_bars(FILE *fp, 
       double min, double max,
       double lo_alarm, double lo_caution, double hi_caution, double hi_alarm, 
       bool lo_alarm_enable, bool lo_caution_enable, bool hi_caution_enable, bool hi_alarm_enable, 
       double x, double y, double height, double width)
{
  double bottom;
  double top;
  double green_top;
  double green_bottom;

  top = y;

  fprintf(fp, "\n");
  fprintf(fp, "<!-- Start of Alarm bars-->\n");
  if (hi_alarm_enable)
  {
    bottom = convert_scale(fp, hi_alarm, y, height, min, max);
    fprintf(fp, "<!-- RED top = %lf, bottom = %lf, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    top = bottom;
  }
  if (hi_caution_enable)
  {
    bottom = convert_scale(fp, hi_caution, y, height, min, max);
    fprintf(fp, "<!-- YELLOW top = %lf, bottom = %lf, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    top = bottom;
  }

  green_top = top;
 
  bottom = y + height;

  if (lo_alarm_enable)
  {
    top = convert_scale(fp, lo_alarm, y, height, min, max);
    fprintf(fp, "<!-- RED top = %lf, bottom = %lf, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    bottom = top;
  }
  if (lo_caution_enable)
  {
    top = convert_scale(fp, lo_caution, y, height, min, max);
    fprintf(fp, "<!-- YELLOW top = %lf, bottom = %lf, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    bottom = top;
  }

  green_bottom = bottom;

  fprintf(fp, "<!-- GREEN top = %lf, bottom = %lf, -->\n", green_top, green_bottom);
  fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"springgreen\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, green_top, width, green_bottom - green_top);
  fprintf(fp, "<!-- End of Alarm bars-->\n\n");
}

/**********************************************************/

void gen_bar_gradientes(FILE *fp)
{
  fprintf(fp, "\n");
  fprintf(fp, "<!-- START of gradients for bars-->\n");
  fprintf(fp, "  <defs>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearBlue\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"mediumblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"lightblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"mediumblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearGrey\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"white\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "  </defs>\n");
  fprintf(fp, "<!-- END of gradients for bars-->\n");
  fprintf(fp, "\n");
}

/**********************************************************/

void gen_analog_bar(FILE *fp, const char *id, double x, double y, double width, double height)
{
  fprintf(fp, "\n");
  fprintf(fp, "<!-- START of bars and outline-->\n");
  fprintf(fp, "  <rect fill=\"url(#grLinearGrey)\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" stroke=\"none\" stroke-width=\"0\"/>\n",
                         x, y, width, height); 
  fprintf(fp, "  <rect fill=\"url(#grLinearBlue)\" id=\"%s\" x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" stroke=\"none\" stroke-width=\"0\" transform=\"rotate(180 %lf %lf)\"/>\n",
                         id, x, y, width, height, x + (width * 0.5), y + (height * 0.5)); 
  fprintf(fp, "  <rect x=\"%lf\" y=\"%lf\" width=\"%lf\" height=\"%lf\" fill=\"none\" stroke=\"#000000\" stroke-width=\"1\" />\n",
                         x, y, width, height); 
  fprintf(fp, "<!-- END of bars and outline-->\n");
}

/**********************************************************/

void gen_bar_object(FILE *fp, double x, double y, double height)
{
  fprintf(fp, "function BarObject(x, y, height)\n");
  fprintf(fp, "{\n");
  fprintf(fp, "  this.x = x;\n");
  fprintf(fp, "  this.y = y;\n");
  fprintf(fp, "  this.height=height;\n");
  fprintf(fp, "  this.max = 400.0;\n");
  fprintf(fp, "  this.min = 0.0;\n");
  fprintf(fp, "  console.log(\"new BarObject: \" + this.x + \", \" + this.y  + \", \" + this.height);\n");
  fprintf(fp, "  this.the_bar_obj = document.getElementById(\"my_rect\");\n");
  fprintf(fp, "  console.log(\"this.the_bar_obj: \" + this.the_bar_obj);\n");
  fprintf(fp, "}\n");
  fprintf(fp, "\n");
  fprintf(fp, "function convert_scale(euval, y, height, min, max)\n");
  fprintf(fp, "{\n");
  fprintf(fp, "  console.log(\"convert scale:\" + euval + \", \" + y  + \", \" + height  + \", \" + min  + \", \" + max);\n");
  fprintf(fp, "  var fraction = (euval-min ) / (max - min);\n");
  fprintf(fp, "  var span = (height * fraction);\n");
  fprintf(fp, "  var scale = y + height - span;\n");
  fprintf(fp, "  if (scale > y+height) scale = y+height;\n");
  fprintf(fp, "  if (scale < y) scale = y;\n");
  fprintf(fp, "  console.log(\"convert scale:\" + fraction  + \", \" + span + \", \" + scale);\n");
  fprintf(fp, "  return scale;\n");
  fprintf(fp, "}\n");
  fprintf(fp, "\n");
  fprintf(fp, "function f_set_pv(a_pv)\n");
  fprintf(fp, "{\n");
  fprintf(fp, "  var fraction = (a_pv - this.min ) / (this.max - this.min);\n");
  fprintf(fp, "  var bar_height = fraction * (this.height);\n");
  fprintf(fp, "  if (bar_height < 0.0) bar_height = 0.0\n");
  fprintf(fp, "  if (bar_height > this.height) bar_height = this.height\n");
  fprintf(fp, "  console.log(\"set_pv:\" + a_pv + \", \" + fraction  + \", \" + bar_height  + \", \" + this.min  + \", \" + this.max);\n");
  fprintf(fp, "  this.the_bar_obj.setAttribute(\"height\", bar_height);\n");
  fprintf(fp, "}\n");
  fprintf(fp, "function f_set_limits(a_min, a_max)\n");
  fprintf(fp, "{\n");
  fprintf(fp, "  var inc\n");
  fprintf(fp, "  var the_id\n");
  fprintf(fp, "  var i\n");
  fprintf(fp, "  console.log(\"set_limits:\" + a_min + \", \" + a_max);\n");
  fprintf(fp, "  if (a_max > a_min)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    this.min = a_min;\n");
  fprintf(fp, "    this.max = a_max;\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  else\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    this.min = a_max;\n");
  fprintf(fp, "    this.max = a_min;\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  if (this.max > 200) inc = 100; else inc = 10;\n");
  fprintf(fp, "  for (var i=0; i<=5; i++)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    the_id = \"major_\" + i;\n");
  fprintf(fp, "    console.log(\"text id:\" + the_id);\n");
  fprintf(fp, "    text_obj = document.getElementById(the_id);\n");
  fprintf(fp, "    text_obj.textContent=i * inc;\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "}\n");
  fprintf(fp, "\n");
  fprintf(fp, "function f_set_alarms(alarm_hi, caution_hi, caution_lo, alarm_lo, alarm_hi_en, caution_hi_en, caution_lo_en, alarm_lo_en)\n");
  fprintf(fp, "{\n");
  fprintf(fp, "  var bottom;\n");
  fprintf(fp, "  var top;\n");
  fprintf(fp, "  var rect_obj;\n");
  fprintf(fp, "  var pvals;\n");
  fprintf(fp, "\n");
  fprintf(fp, "  pvals = \"vals:\" + alarm_hi + \", \" + caution_hi + \", \" + caution_lo + \", \" + alarm_lo + \", \"\n");
  fprintf(fp, "  pvals += alarm_hi_en + \", \" +  caution_hi_en + \", \" + caution_lo_en + \", \" +  alarm_lo_en;\n");
  fprintf(fp, "  console.log(pvals);\n");
  fprintf(fp, "  rect_obj = document.getElementById(\"caution_hi_rect\");\n");
  fprintf(fp, "  if (caution_hi_en)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    bottom = convert_scale(caution_hi, this.y, this.height, this.min, this.max);\n");
  fprintf(fp, "    console.log(\"Caution Hi:\" + bottom);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", bottom - this.y);\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  else\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    console.log(\"Caution Hi NOT enabled\");\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", 0);\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "\n");

  fprintf(fp, "  rect_obj = document.getElementById(\"alarm_hi_rect\");\n");
  fprintf(fp, "  if (alarm_hi_en)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    bottom = convert_scale(alarm_hi, this.y, this.height, this.min, this.max);\n");
  fprintf(fp, "    console.log(\"Alarm:\" + bottom);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", bottom - this.y);\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  else\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    console.log(\"Alarm Hi NOT enabled\");\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", 0);\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "\n");

  fprintf(fp, "  rect_obj = document.getElementById(\"caution_lo_rect\");\n");
  fprintf(fp, "  if (caution_lo_en)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    top = convert_scale(caution_lo, this.y, this.height, this.min, this.max);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"y\", top);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", this.height - (top - this.y));\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  else\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    console.log(\"Caution Low NOT enabled\");\n");
  fprintf(fp, "    rect_obj.setAttribute(\"y\", this.y + this.height);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", 0);\n");
  fprintf(fp, "  }\n");

  fprintf(fp, "  rect_obj = document.getElementById(\"alarm_lo_rect\");\n");
  fprintf(fp, "  if (alarm_lo_en)\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    top = convert_scale(alarm_lo, this.y, height, this.min, this.max);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"y\", top);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", this.height - (top - this.y));\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "  else\n");
  fprintf(fp, "  {\n");
  fprintf(fp, "    console.log(\"Alarm Low NOT enabled\");\n");
  fprintf(fp, "    rect_obj.setAttribute(\"y\", this.y + this.height);\n");
  fprintf(fp, "    rect_obj.setAttribute(\"height\", 0);\n");
  fprintf(fp, "  }\n");
  fprintf(fp, "\n");

  fprintf(fp, "}\n");
  fprintf(fp, "\n");
  fprintf(fp, "BarObject.prototype.set_pv=f_set_pv;\n");
  fprintf(fp, "BarObject.prototype.set_limits=f_set_limits;\n");
  fprintf(fp, "BarObject.prototype.set_alarms=f_set_alarms;\n");
  fprintf(fp, "\n");
  fprintf(fp, "var bar_object_1;\n");
  fprintf(fp, "\n");
}

/**********************************************************/

void gen_example_script(FILE *fp, double bar_x, double bar_y, double bar_height, double scale_max)
{
  fprintf(fp, "  <script type=\"text/ecmascript\"><![CDATA[\n");
  fprintf(fp, "    var going_up = true;\n");
  fprintf(fp, "    var bar_fill = %lf;\n", bar_height * 0.5);
  fprintf(fp, "    var bar_obj;\n");
  fprintf(fp, "    var text_obj;\n");
  fprintf(fp, "    var pv_text_obj;\n");
  fprintf(fp, "    var tcount=0;\n");
  fprintf(fp, "    var xReq;\n");
  fprintf(fp, "    var hrf;\n");
  fprintf(fp, "    var eu_label = \"undef\";\n");
  fprintf(fp, "\n");
  gen_bar_object(fp, bar_x, bar_y, bar_height);
  fprintf(fp, "\n");

  include_file(fp, ".", "scales.js", false);
  
  fprintf(fp, "    function onResponse()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      if (xReq.readyState != 4)  { return; }\n");
  fprintf(fp, "      val = JSON.parse(xReq.responseText);\n");
  fprintf(fp, "      pv_text_obj.textContent=(val[0] + \" \" + eu_label);\n");
  //fprintf(fp, "      pv_text_obj.textContent=(val[0]);\n");
  fprintf(fp, "      bar_object_1.set_pv(val[0]);\n");
  //fprintf(fp, "      val.pv = val.pv * %lf;\n", bar_height / scale_max);
  fprintf(fp, "      xReq.abort(); <!-- set the ready state back to 0 --> \n");
  fprintf(fp, "      //bar_obj.setAttribute(\"height\", val.pv);\n");
  fprintf(fp, "      //bar_obj.setAttribute(\"y\", %lf - val.pv);\n", bar_height + bar_y);
  fprintf(fp, "    }\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "    function intervalHandler()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      if (xReq.readyState != 0)  { return; }\n"); 
  fprintf(fp, "      xReq.open(\"GET\", hrf, true);\n");
  fprintf(fp, "      xReq.send(null);\n");
  fprintf(fp, "    }\n");
  fprintf(fp, "\n");

  fprintf(fp, "   function cfg_onResponse()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      var text_obj;\n");
  fprintf(fp, "      if (xcReq.readyState != 4)  { return; }\n");
  fprintf(fp, "      val = JSON.parse(xcReq.responseText);\n");
  fprintf(fp, "      bar_object_1.set_limits(val.eu_lo, val.eu_hi);\n");
  fprintf(fp, "      bar_object_1.set_alarms(val.hi_alarm, val.hi_caution, val.lo_caution, val.lo_alarm, val.hi_alarm_enable,\n");
  fprintf(fp, "                              val.hi_caution_enable, val.lo_caution_enable, val.lo_alarm_enable);\n");

  fprintf(fp, "      eu_label = val.eu;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"tag_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.tag;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"description_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.description;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"eu_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.eu;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"driver_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.driver;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"card_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.card;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"channel_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.channel;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"eu_lo_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.eu_lo;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"eu_hi_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.eu_hi;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"raw_lo_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.raw_lo;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"raw_hi_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.raw_hi;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"decimal_places_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.decimal_places;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"zero_cutoff_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.zero_cutoff;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"lo_alarm_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.lo_alarm;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"lo_caution_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.lo_caution;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"hi_caution_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.hi_caution;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"hi_alarm_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.hi_alarm;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"deadband_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.deadband;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"lo_alarm_enable_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.lo_alarm_enable;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"lo_caution_enable_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.lo_caution_enable;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"hi_caution_enable_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.hi_caution_enable;\n");
  fprintf(fp, "      text_obj = document.getElementById(\"hi_alarm_enable_text\");\n");
  fprintf(fp, "      text_obj.textContent=val.hi_alarm_enable;\n");
  fprintf(fp, "    }\n");
//"tag":"LEVEL","description":"NIVEL","eu":"cm","driver":0,"card":0,"channel":2,"eu_lo":500.000000,"eu_hi":0.000000,"raw_lo":6400.000000,"raw_hi":32000.000000,"decimal_places":4,"zero_cutoff":-125.000000}
  fprintf(fp, "\n");
  fprintf(fp, "    function cfg_read()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      xcReq = new XMLHttpRequest();\n");
  fprintf(fp, "      xcReq.onreadystatechange = cfg_onResponse;\n");
  fprintf(fp, "      xcReq.open(\"GET\", \"http://\" + location.hostname + \"/helloworld/config\" + location.search, true);\n");
  fprintf(fp, "      xcReq.send(null);\n");
  fprintf(fp, "    }\n");

  fprintf(fp, "\n");
  fprintf(fp, "    function load()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      bar_object_1 = new BarObject(%lf, %lf, %lf);\n", bar_x, bar_y, bar_height);
  fprintf(fp, "      bar_obj = document.getElementById(\"my_rect\");\n");
  fprintf(fp, "      text_obj = document.getElementById(\"my_text\");\n");
  fprintf(fp, "      pv_text_obj = document.getElementById(\"pv_text\");\n");
  fprintf(fp, "      //text_obj.textContent=\" host \" + location.hostname + \" end \" + location.host + \"--\" + location.href;\n");
  fprintf(fp, "      hrf = \"http://\" + location.hostname + \"/helloworld/tag\" + location.search\n");
  fprintf(fp, "      xReq = new XMLHttpRequest();\n");
  fprintf(fp, "      xReq.onreadystatechange = onResponse;\n");
  fprintf(fp, "      //text_obj.textContent=hrf;\n");
  fprintf(fp, "      cfg_read();\n");
  fprintf(fp, "      var interval = setInterval(\"intervalHandler()\", 250);\n");
  fprintf(fp, "    };\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "    function do_bar()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      if (going_up)\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        bar_fill = bar_fill + %lf;\n", 0.01 * bar_height);
  fprintf(fp, "        if (bar_fill > %lf)\n", bar_height);
  fprintf(fp, "        {\n");
  fprintf(fp, "          bar_fill = %lf;\n", bar_height);
  fprintf(fp, "          going_up = false;\n");
  fprintf(fp, "          text_obj.textContent=\"Hit Top\";\n");
  fprintf(fp, "        }\n");
  fprintf(fp, "      } \n");
  fprintf(fp, "      else\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        bar_fill = bar_fill - %lf;\n", bar_height * 0.01);
  fprintf(fp, "        if (bar_fill < 0)\n");
  fprintf(fp, "        {\n");
  fprintf(fp, "          bar_fill = 0;\n");
  fprintf(fp, "          going_up = true;\n");
  fprintf(fp, "          text_obj.textContent=\"Hit Bottom\";\n");
  fprintf(fp, "        }\n");
  fprintf(fp, "      }\n");
  fprintf(fp, "      bar_obj.setAttribute(\"height\", bar_fill);\n");
  fprintf(fp, "      bar_obj.setAttribute(\"y\", %lf - bar_fill);\n", bar_height + bar_y);
  fprintf(fp, " \n");     
  fprintf(fp, "      tcount++;\n");
  fprintf(fp, "      if (tcount > 5)\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        pv_text_obj.textContent=(Math.round(10*((bar_fill / %lf) * %lf)))/10 + \" PSI\";\n", bar_height, scale_max);
  fprintf(fp, "        tcount=0;\n");
  fprintf(fp, "      }\n");
  fprintf(fp, "    };\n");
  fprintf(fp, "\n");
  fprintf(fp, "  ]]></script>\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "  \n");
  fprintf(fp, " <text id=\"my_text\" x=\"40\" y=\"10\" \n");
  fprintf(fp, "        font-family=\"Verdana\" font-size=\"10\" fill=\"tomato\" >\n");
  fprintf(fp, "    Analog Input\n");
  fprintf(fp, "  </text>\n");
  fprintf(fp, "\n");
}

/**********************************************************/

void gen_ai_info(FILE *fp, double x, double y, double text_height)
{
  double text_dif = text_height * 1.05;
  fprintf(fp, "<!-- START of Analog Input Attributes -->\n");

  fprintf(fp, "<text id=\"tag_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Tag: Level\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text  x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n",
                     x, y, text_height);
  fprintf(fp, "Tag:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"description_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Description: Level of first tank\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Description:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"eu_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "EU Label: cm.\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "EU Label: \n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"driver_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Driver: 1\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Driver:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"card_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Card: 0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Card:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"channel_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Channel: 231\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Channel:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"eu_lo_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "EU Low: 0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "EU Low:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"eu_hi_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "EU High: 600\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "EU High:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"raw_lo_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Raw Low: 0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Raw Low:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"raw_hi_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Raw High: 10\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Raw High:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"decimal_places_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Decimal Places: 0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Decimal Places:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;

  fprintf(fp, "<text id=\"zero_cutoff_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "Zero Cutoff: 2\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Zero Cutoff:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"lo_alarm_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Low Alarm:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"lo_caution_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Low Caution:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"hi_caution_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Hi Caution:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"hi_alarm_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Hi Alarm:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"deadband_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "0\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Deadband:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"lo_alarm_enable_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "false\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Lo Alarm Enable:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"lo_caution_enable_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "false\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Lo Caution Enable:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"hi_caution_enable_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "false\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Hi Caution Enable:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<text id=\"hi_alarm_enable_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\">\n", 
                     x + text_height / 2.0, y, text_height);
  fprintf(fp, "false\n");
  fprintf(fp, "</text>\n");
  fprintf(fp, "<text x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" text-anchor=\"end\">\n", 
                     x, y, text_height);
  fprintf(fp, "Hi Alarm Enable:\n");
  fprintf(fp, "</text>\n");
  y += text_dif;
  
  fprintf(fp, "<!-- END of Analog Input Attributes -->\n");
}
/***
LEVEL|NIVEL|cm|0|0|2|500.0|0.0|6400|32000|4|-125.0|0|0|0|0|0|0|0|0|0|^M
#    Tag^M
#    Description^M
#    Engineering Units Label^M
#    Driver Number^M
#    Card^M
#    Channel^M
#    Engineering Units Low^M
#    Engineering Units High^M
#    Raw Value Low^M
#    Raw Value High^M
#    Decimal Places^M
#    Zero Cutoff^M
#    Alarm Low^M
#    Caution Low^M
#    Caution High^M
#    Alarm High^M
#    Alarm Deadband^M
#    Alarm Low Enable^M
#    Caution Low Enable^M
#    Caution High Enable^M
#    Alarm High Enable^M
***/


/**********************************************************/

void gen_bar(FILE *fp, double x, double y, double height, const char *id, double max)
{
  double the_width = height * 0.10;
  double alarm_width = the_width * 0.5;
  static bool gen_grad = false;

  if (not gen_grad)
  {
    gen_bar_gradientes(fp);
    gen_grad = true;
  }

  gen_analog_bar(fp, id, x, y, the_width, height);

  n_gen_alarm_bars(fp, 
       0, max,
       alarm_lo, caution_lo, caution_hi, alarm_hi, 
       //false, false, false, false, 
       true, true, true, true, 
       x - alarm_width - 1, y, height, alarm_width);
  gen_scale(fp, x + the_width,y, y + height, 0, max, height / 20.0, height / 30.0);
}

/**********************************************************/

int main(int argc, char *argv[])
{

  double scale_max;
  double scale_min = 0.0;
  
  double bar_x = 50;
  double bar_y = 20;
  double bar_height = 100;

  FILE *fp = stdout;  

  if (argc != 2)
  {
    fprintf(stderr,  "Error, you must have exactly one argument - the scale maximum\n");
    exit(1);
  }
  scale_max = atof(argv[1]);
  alarm_lo = (0.08 * (scale_max - scale_min)) + scale_min;
  caution_lo = (0.28 * (scale_max - scale_min)) + scale_min;
  caution_hi =  (0.76 * (scale_max - scale_min)) + scale_min;
  alarm_hi =  (0.90 * (scale_max - scale_min)) + scale_min;

  gen_svg_header(fp, "Analog Input Faceplate", 0, 0, 300, 150);

  gen_imasa_logo(fp, 0, 0, 30, 30);

  gen_example_script(fp, bar_x, bar_y, bar_height, scale_max);

  gen_bar(fp, bar_x, bar_y, bar_height, "my_rect", scale_max);

  //gen_bar(fp, bar_x * 4, bar_y * 2, bar_height / 2, "my_rect2", scale_max);
  //gen_bar(fp, bar_x + 60, bar_y + 10, bar_height - 20, "my_test", scale_max);

  fprintf(fp, "  <text id=\"pv_text\" x=\"%lf\" y=\"%lf\" font-family=\"Verdana\" font-size=\"%lf\" fill=\"black\" >360 PSI</text>\n",
                     bar_x, bar_y + (bar_height * 1.1), bar_height * 0.06);

  gen_ai_info(fp, 160, 10, 6);

  gen_svg_end(fp);
}
