#include <stdio.h>

const int minor_length = 3;
const int major_length = 6;
const int text_height = 8;
const int n_major = 3;
const int n_minor = 4;
const int scale_min = 0;
const int scale_max = 600;

const int bar_x = 20; 
const int bar_y = 10; 
const int bar_height = 100;
const int bar_width = 20; 
const int a_bar_width = 10; 

void gen_imasa_logo(FILE *fp, float x, float y, 
            float height, float width);
//, float fraction_top, float fraction_bottom, float ftop2, float fbot2);
/**********************************************************/

void gen_svg_header(FILE *fp, const char *title, int vb_x1, int vb_y1, int vb_x2, int vb_y2)
{
  fprintf(fp, "<!--\n"); 
  fprintf(fp, "Auto generated file DO NOT EDIT\n");
  fprintf(fp, "Generated by: %s\n", __FILE__);
  fprintf(fp, "-->\n");

  fprintf(fp, "<svg xmlns=\"http://www.w3.org/2000/svg\"\n");
  fprintf(fp, "     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n");
  fprintf(fp, "     width=\"100%%\" height=\"100%%\" viewBox=\"%d %d %d %d\" onload=\"load()\">\n", 

          vb_x1, vb_y1, vb_x2, vb_y2);
  fprintf(fp, "\n");
  fprintf(fp, "  <title>%s</title>\n", title);
  fprintf(fp, "  <metadata>author: Don Carr</metadata>\n");
  fprintf(fp, "  <defs>\n");
  fprintf(fp, "    <linearGradient id=\"xgrLinearBeige\" x1=\"30%%\" y1=\"0%%\" x2=\"70%%\" y2=\"100%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"tan\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"beige\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"tan\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "  </defs>\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "  <rect fill=\"url(#xgrLinearBeige)\" x=\"0%%\" y=\"0%%\" width=\"100%%\" height=\"100%%\" stroke=\"none\" stroke-width=\"0\"/>\n");
  //fprintf(fp, "  <image x=\"140\" y=\"40\" width=\"30\" height=\"30\" xlink:href=\"imasa.png\" />\n");
  //fprintf(fp, "  <image x=\"170\" y=\"40\" width=\"30\" height=\"30\" xlink:href=\"imasa.png\" />\n");
  gen_imasa_logo(fp, 100, 30, 80, 80);
  fprintf(fp, "\n");
}


/**********************************************************/

void gen_svg_end(FILE *fp)
{
  fprintf(fp, "\n");
  fprintf(fp, "</svg>\n");
}

/**********************************************************/

void gen_scale(FILE *fp, int x1, int y1, int y2, int min, int max)
{

  int x_text_start = x1 + major_length + 2;

  fprintf(fp, "<!-- Start of Scale -->\n");
  for (int i=0; i <= n_major; i++)
  {
    int major_y = (((y2 - y1) * i) / n_major) + y1; 
    //fprintf(fp, "<!-- i = %d, max = %d, min = %d, n_major = %d -->\n", i, max, min, n_major);
    fprintf(fp, "  <text x=\"%d\" y=\"%d\" font-family=\"Verdana\" font-size=\"%d\" fill=\"black\">%d</text>\n", 
         x_text_start, 
         major_y + (text_height/3), 
         text_height, 
         (((max - min) * (n_major - i)) / n_major) + min);
    fprintf(fp, "  <line x1=\"%d\"  y1=\"%d\" x2=\"%d\" y2=\"%d\" style=\"stroke:#000000;\"/>\n",
            x1, major_y, x1 + major_length, major_y);
    if (i < n_major)
    {
      for (int j=1; j < n_minor; j++)
      {
        int minor_y = (((y2 - y1) * ((i * n_minor) + j)) / (n_major * n_minor)) + y1; 
        //fprintf(fp, "<!-- i = %d, j = %d, minor_y = %d -->\n", i, j, minor_y);
        fprintf(fp, "  <line x1=\"%d\"  y1=\"%d\" x2=\"%d\" y2=\"%d\" style=\"stroke:#000000;\"/>\n",
            x1, minor_y, x1 + minor_length, minor_y);
      }
    }
  }
  fprintf(fp, "<!-- End of Scale -->\n");
}

/**********************************************************/

int convert_scale(FILE *fp, double val, int y, int height, double min, double max)
{
  double fraction = (val-min ) / (max - min);
  int span = (height * fraction) + 0.5;
  int scale = y + height - span;
  //fprintf(fp, "<!-- val = %0.1lf, scale = %d, -->\n", val, scale);
  return scale;
}

/**********************************************************/

void gen_alarm_bars(FILE *fp, 
       double min, double max,
       double lo_alarm, double lo_caution, double hi_caution, double hi_alarm, 
       bool lo_alarm_enable, bool lo_caution_enable, bool hi_caution_enable, bool hi_alarm_enable, 
       int x, int y, int height, int width)
{
  int bottom;

  int top;
  int green_top;
  int green_bottom;

  top = y;
  fprintf(fp, "\n<!-- Start of Alarm bars-->\n");
  if (hi_alarm_enable)
  {
    bottom = convert_scale(fp, hi_alarm, y, height, min, max);
    //fprintf(fp, "<!-- top = %d, bottom = %d, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    top = bottom;
  }
  if (hi_caution_enable)
  {
    bottom = convert_scale(fp, hi_caution, y, height, min, max);
    //fprintf(fp, "<!-- top = %d, bottom = %d, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    top = bottom;
  }

  green_top = top;
  bottom = y + height;

  if (lo_alarm_enable)
  {
    top = convert_scale(fp, lo_alarm, y, height, min, max);
    //fprintf(fp, "<!-- top = %d, bottom = %d, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" fill=\"red\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    bottom = top;
  }
  if (lo_caution_enable)
  {
    top = convert_scale(fp, lo_caution, y, height, min, max);
    //fprintf(fp, "<!-- top = %d, bottom = %d, -->\n", top, bottom);
    fprintf(fp, "  <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" fill=\"yellow\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, top, width, bottom - top);
    bottom = top;
  }

  green_bottom = bottom;

  //fprintf(fp, "<!-- top = %d, bottom = %d, -->\n", green_top, green_bottom);
  fprintf(fp, "  <rect x=\"%d\" y=\"%d\" width=\"%d\" height=\"%d\" fill=\"springgreen\" stroke=\"none\" stroke-width=\"0\"/>\n",
        x, green_top, width, green_bottom - green_top);
  fprintf(fp, "<!-- End of Alarm bars-->\n\n");
}

/**********************************************************/

int main(int argc, char *argv[])
{

  FILE *fp = stdout;  
  

  gen_svg_header(fp, "Title goes here", 0, 0, 300, 150);

  fprintf(fp, "  <script type=\"text/ecmascript\"><![CDATA[\n");
  fprintf(fp, "    var going_up = true;\n");
  fprintf(fp, "    var bar_fill = 50;\n");
  fprintf(fp, "    var bar_obj;\n");
  fprintf(fp, "    var text_obj;\n");
  fprintf(fp, "    var pv_text_obj;\n");
  fprintf(fp, "    var tcount=0;\n");
  fprintf(fp, "\n");
  fprintf(fp, "    function intervalHandler()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      do_bar();\n");
  fprintf(fp, "    }\n");
  fprintf(fp, "\n");
  fprintf(fp, "    function load()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      bar_obj = document.getElementById(\"my_rect\");\n");
  fprintf(fp, "      text_obj = document.getElementById(\"my_text\");\n");
  fprintf(fp, "      pv_text_obj = document.getElementById(\"pv_text\");\n");
  fprintf(fp, "      var interval = setInterval(\"intervalHandler()\", 100);\n");
  fprintf(fp, "    };\n");
  fprintf(fp, "\n");
  fprintf(fp, "    function do_bar()\n");
  fprintf(fp, "    {\n");
  fprintf(fp, "      if (going_up)\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        bar_fill = bar_fill + 1;\n");
  fprintf(fp, "        if (bar_fill > 100)\n");
  fprintf(fp, "        {\n");
  fprintf(fp, "          bar_fill = 100;\n");
  fprintf(fp, "          going_up = false;\n");
  fprintf(fp, "          text_obj.textContent=\"Hit Top\";\n");
  fprintf(fp, "        }\n");
  fprintf(fp, "      } \n");
  fprintf(fp, "      else\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        bar_fill = bar_fill - 1;\n");
  fprintf(fp, "        if (bar_fill < 0)\n");
  fprintf(fp, "        {\n");
  fprintf(fp, "          bar_fill = 0;\n");
  fprintf(fp, "          going_up = true;\n");
  fprintf(fp, "          text_obj.textContent=\"Hit Bottom\";\n");
  fprintf(fp, "        }\n");
  fprintf(fp, "      }\n");
  fprintf(fp, "      bar_obj.setAttribute(\"height\", bar_fill);\n");
  fprintf(fp, "      bar_obj.setAttribute(\"y\", 100 + 10 - bar_fill);\n");
  fprintf(fp, " \n");     
  fprintf(fp, "      tcount++;\n");
  fprintf(fp, "      if (tcount > 5)\n");
  fprintf(fp, "      {\n");
  fprintf(fp, "        pv_text_obj.textContent=(bar_fill * 6) + \" PSI\";\n");
  fprintf(fp, "        tcount=0;\n");
  fprintf(fp, "      }\n");
  fprintf(fp, "    };\n");
  fprintf(fp, "  ]]></script>\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");
  fprintf(fp, "  \n");
  fprintf(fp, " <text id=\"my_text\" x=\"100\" y=\"20\" \n");
  fprintf(fp, "        font-family=\"Verdana\" font-size=\"20\" fill=\"tomato\" >\n");
  fprintf(fp, "    starting \n");
  fprintf(fp, "  </text>\n");
  fprintf(fp, "\n");

  fprintf(fp, "  <defs>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearBlue\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"mediumblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"lightblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"mediumblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearGrey\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"white\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "  </defs>\n");
  fprintf(fp, "\n");
  fprintf(fp, "\n");

  fprintf(fp, "  <rect fill=\"url(#grLinearGrey)\" id=\"myw_rect\" x=\"20\" y=\"10\" width=\"20\" height=\"100\" stroke=\"none\" stroke-width=\"0\"/>\n");
  fprintf(fp, "  <defs>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearBlue\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"darkblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"lightblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"darkblue\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "    <linearGradient id=\"grLinearGrey\" x1=\"0%%\" y1=\"0%%\" x2=\"100%%\" y2=\"0%%\" spreadMethod=\"pad\" gradientUnits=\"objectBoundingBox\">\n");
  fprintf(fp, "      <stop offset=\"0%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"50%%\" stop-color=\"white\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "      <stop offset=\"100%%\" stop-color=\"lightgrey\" stop-opacity=\"1\"/>\n");
  fprintf(fp, "    </linearGradient>\n");
  fprintf(fp, "  </defs>\n");
  fprintf(fp, "  <rect fill=\"url(#grLinearBlue)\" id=\"my_rect\" x=\"20\" y=\"50\" width=\"20\" height=\"60\" stroke=\"none\" stroke-width=\"0\"/>\n");
  fprintf(fp, "  <rect x=\"20\" y=\"10\" width=\"20\" height=\"100\" fill=\"none\" stroke=\"#000000\" stroke-width=\"1\" />\n");

  gen_alarm_bars(fp, 
       scale_min, scale_max,
       90.0, 140.0, 380.0, 450.0, 
       //false, false, false, false, 
       true, true, true, true, 
       bar_x - a_bar_width - 1, bar_y, bar_height, a_bar_width);

  fprintf(fp, "\n");
  gen_scale(fp, bar_x + bar_width, bar_y, bar_y + bar_height, scale_min, scale_max);
  fprintf(fp, "\n");

  fprintf(fp, "  <text id=\"pv_text\" x=\"20\" y=\"125\" font-family=\"Verdana\" font-size=\"10\" fill=\"black\" >360 PSI</text>\n");

  gen_svg_end(fp);
}
